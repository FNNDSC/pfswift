#!/usr/bin/env python3
#
# (c) 2016 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                   Boston Children's Hospital
#
#              http://childrenshospital.org/FNNDSC/
#                        dev@babyMRI.org
#

import sys
import os
# sys.path.insert(1, os.path.join(os.path.dirname(__file__), '..'))
from    distutils.sysconfig import get_python_lib

from    argparse            import RawTextHelpFormatter
from    argparse            import ArgumentParser
import  socket
# import  pman
import  threading

sys.path.insert(1, os.path.join(os.path.dirname(__file__), '../pfswift'))
try:
    import swift
except:
    sys.path.insert(1, os.path.join(get_python_lib(True, True), 'site-packages'))
    sys.path.insert(1, os.path.join(get_python_lib(True, True), 'site-packages/pfswift'))
    import pman

from pfmisc._colors         import Colors    

str_defIP = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]

str_version = "0.99"
str_name    = 'pfswift'
str_desc    = Colors.CYAN + """


        __              _  __ _   
       / _|            (_)/ _| |  
 _ __ | |_ _____      ___| |_| |_ 
| '_ \|  _/ __\ \ /\ / / |  _| __|
| |_) | | \__ \\ V  V /| | | | |_ 
| .__/|_| |___/ \_/\_/ |_|_|  \__|
| |                               
|_|                               


font generated by:
http://patorjk.com/software/taag/#p=display&f=Doom&t=pfswift


                            Path-File swift module

           A python API and CLI for interactive with a swift storage
                                container.

                              -- version """ + \
           Colors.YELLOW + str_version + Colors.CYAN + """ --
           
    'pfswift' provides CLI and API access to a swift container.
    
    
""" + \
           Colors.BLINK_RED +  """

              +------------------------------------------------------+
              | NOTE THAT 'pfswift' DOES NOT CURRENTLY AUTHENTICATE  |
              | AND WILL HONOR *ALL* PATH/FILE MANAGEMENT REQUESTS!  |
              +------------------------------------------------------+
              
""" + Colors.NO_COLOUR

parser  = ArgumentParser(description = str_desc, formatter_class = RawTextHelpFormatter)

parser.add_argument(
    '--ip',
    action  = 'store',
    dest    = 'ip',
    default = str_defIP,
    help    = 'IP to connect.'
)
parser.add_argument(
    '--port',
    action  = 'store',
    dest    = 'port',
    default = '5010',
    help    = 'Port to use.'
)
parser.add_argument(
    '--protocol',
    action  = 'store',
    dest    = 'protocol',
    default = 'tcp',
    help    = 'Protocol to use.'
)
parser.add_argument(
    '--rawmode',
    action  = 'store',
    dest    = 'raw',
    default = '1',
    help    = 'Router raw mode.'
)
parser.add_argument(
    '--listeners',
    action  = 'store',
    dest    = 'listeners',
    default = '1',
    help    = 'Number of listeners.'
)
parser.add_argument(
    '--http',
    action  = 'store_true',
    dest    = 'http',
    default = False,
    help    = 'Send HTTP formatted replies with content-type html; otherwise content-type json.'
)
parser.add_argument(
    '--debugToFile',
    action  = 'store_true',
    dest    = 'debugToFile',
    default = False,
    help    = 'If true, stream debugging info to file.'
)
parser.add_argument(
    '--debugFile',
    action  = 'store',
    dest    = 'debugFile',
    default = '%s/tmp/debug-pman.log' % os.environ['HOME'],
    help    = 'In conjunction with --debugToFile, stream debugging info to specified file.'
)
parser.add_argument(
    '--listenerSleep',
    action  = 'store',
    dest    = 'listenerSleep',
    default = '0.1',
    help    = 'A delay in each listener loop to prevent busy-wait.'
)
parser.add_argument(
    '--DBsavePeriod',
    action  = 'store',
    dest    = 'DBsavePeriod',
    default = '60',
    help    = 'The periodicity, in seconds, for the internal DB to be flushed to disk.'
)
parser.add_argument(
    '--version',
    help    = 'if specified, print version number',
    dest    = 'b_version',
    action  = 'store_true',
    default = False
)
parser.add_argument(
    '--container-env',
    help    = 'The container environment to run against (openshift, swarm)',
    dest    = 'containerEnv',
    action  = 'store',
    default = 'swarm'
)

args = parser.parse_args()

# server          = ThreadedHTTPServer((args.ip, int(args.port)), StoreHandler)
# server.setup(args = vars(args))

if args.b_version:
    print("Version: %s" % str_version)
    sys.exit(1)

comm = pfswift.pfswift(
)

# This starts the main thread and "detaches" execution from the main
# program.
t1 = threading.Thread(target = comm.thread_serve)
st1.start()

